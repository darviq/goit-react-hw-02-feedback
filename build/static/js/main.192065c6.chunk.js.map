{"version":3,"sources":["components/feedbacks/section/feedbackOptions/FeedbackOptions.js","components/feedbacks/section/notification/Notification.js","components/feedbacks/section/Section.js","components/feedbacks/section/statistics/Statistics.js","components/feedbacks/Feedbacks.js","components/App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","type","onClick","data-feed","Notification","message","Section","title","children","Statistics","state","good","neutral","bad","countTotalFeedback","countPositiveFeedbackPercentage","Feedbacks","e","feed","target","dataset","setState","prevState","Math","round","this","Component","App","ReactDOM","render","document","getElementById"],"mappings":"gNAsBeA,EApBS,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBACtB,OACI,qCACI,wBAAQC,KAAK,SAASC,QAASF,EAAiBG,YAAU,OAA1D,kBAGA,wBAAQF,KAAK,SAASC,QAASF,EAAiBG,YAAU,UAA1D,qBAGA,wBAAQF,KAAK,SAASC,QAASF,EAAiBG,YAAU,MAA1D,qBCHGC,EANM,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAAe,4BAAIA,KCYzBC,EAZC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACZ,oCACI,6BAAKD,IACJC,MCoBMC,EAvBI,SAAC,GAAwF,IAAD,IAAtFC,MAAQC,EAA8E,EAA9EA,KAAMC,EAAwE,EAAxEA,QAASC,EAA+D,EAA/DA,IAAMC,EAAyD,EAAzDA,mBAAoBC,EAAqC,EAArCA,gCAClE,OACI,qCACI,4CACA,gCACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,OACX,oDAAuBC,IAAvB,cCiCDC,E,4MArCXN,MAAQ,CACJC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTb,gBAAkB,SAAAiB,GACd,IAAMC,EAAOD,EAAEE,OAAOC,QAAQF,KAC9B,EAAKG,UAAS,SAAAC,GAAS,sBAClBJ,EAAOI,EAAUJ,GAAQ,O,EAIlCJ,mBAAqB,WACjB,OAAO,EAAKJ,MAAMC,KAAO,EAAKD,MAAME,QAAU,EAAKF,MAAMG,K,EAG7DE,gCAAkC,WAC9B,OAAOQ,KAAKC,MAAO,IAAM,EAAKV,qBAAwB,EAAKJ,MAAMC,O,uDAIjE,OACI,mCACI,eAAC,EAAD,CAASJ,MAAM,yBAAf,UACI,cAAC,EAAD,CAAiBP,gBAAiByB,KAAKzB,kBACtCyB,KAAKX,qBAAuB,EACzB,cAAC,EAAD,CAAYJ,MAAOe,KAAKf,MAAOI,mBAAoBW,KAAKX,mBAAoBC,gCAAiCU,KAAKV,kCAElH,cAAC,EAAD,CAAcV,QAAQ,+B,GA9BtBqB,aCCTC,EAJH,WACR,OAAO,cAAC,EAAD,K,MCCXC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.192065c6.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({onLeaveFeedback}) => {\r\n    return (\r\n        <>\r\n            <button type=\"button\" onClick={onLeaveFeedback} data-feed=\"good\">\r\n                Good\r\n            </button>\r\n            <button type=\"button\" onClick={onLeaveFeedback} data-feed=\"neutral\">\r\n                Neutral\r\n            </button>\r\n            <button type=\"button\" onClick={onLeaveFeedback} data-feed=\"bad\">\r\n                Bad\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n    onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({message}) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Section = ({title, children}) => (\r\n    <section>\r\n        <h2>{title}</h2>\r\n        {children}\r\n    </section>\r\n);\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({state: {good, neutral, bad}, countTotalFeedback, countPositiveFeedbackPercentage}) => {\r\n    return (\r\n        <>\r\n            <h2>Statistics</h2>\r\n            <div>\r\n                <p>Good: {good}</p>\r\n                <p>Neutral: {neutral}</p>\r\n                <p>Bad: {bad}</p>\r\n                <p>Total: {countTotalFeedback()}</p>\r\n                <p>Positive feedback: {countPositiveFeedbackPercentage()}%</p>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    countTotalFeedback: PropTypes.func,\r\n    countPositiveFeedbackPercentage: PropTypes.func,\r\n};\r\n\r\nexport default Statistics;\r\n","import React, {Component} from \"react\";\r\nimport FeedbackOptions from \"./section/feedbackOptions/FeedbackOptions\";\r\nimport Notification from \"./section/notification/Notification\";\r\nimport Section from \"./section/Section\";\r\nimport Statistics from \"./section/statistics/Statistics\";\r\n\r\nclass Feedbacks extends Component {\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0,\r\n    };\r\n\r\n    onLeaveFeedback = e => {\r\n        const feed = e.target.dataset.feed;\r\n        this.setState(prevState => ({\r\n            [feed]: prevState[feed] + 1,\r\n        }));\r\n    };\r\n\r\n    countTotalFeedback = () => {\r\n        return this.state.good + this.state.neutral + this.state.bad;\r\n    };\r\n\r\n    countPositiveFeedbackPercentage = () => {\r\n        return Math.round((100 / this.countTotalFeedback()) * this.state.good);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Section title=\"Please, leave feedback\">\r\n                    <FeedbackOptions onLeaveFeedback={this.onLeaveFeedback} />\r\n                    {this.countTotalFeedback() > 0 ? (\r\n                        <Statistics state={this.state} countTotalFeedback={this.countTotalFeedback} countPositiveFeedbackPercentage={this.countPositiveFeedbackPercentage} />\r\n                    ) : (\r\n                        <Notification message=\"No feedback given\" />\r\n                    )}\r\n                </Section>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Feedbacks;\r\n","import React from \"react\";\r\nimport Feedbacks from \"./feedbacks/Feedbacks\";\r\n\r\nconst App = () => {\r\n    return <Feedbacks />;\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}